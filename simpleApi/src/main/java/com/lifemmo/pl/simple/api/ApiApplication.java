/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.lifemmo.pl.simple.api;


import com.lifemmo.pl.base.communicator.CommonOption;
import com.lifemmo.pl.base.service.api.ApiOption;
import com.lifemmo.pl.base.service.api.ApiServer;
import com.lifemmo.pl.simple.api.handler.DisconnectApi;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.scheduling.annotation.EnableScheduling;

import java.util.concurrent.Executors;

import static java.lang.Thread.sleep;


@Slf4j
@EnableScheduling
@SpringBootApplication
public class ApiApplication implements CommandLineRunner {

    @Override
    public void run(String... args) throws Exception {
        try{
            log.debug("api start");
            CommonOption commonOption = new CommonOption();
            commonOption.setServerSystem((systemPanel,baseSender ) -> new ApiSystem(systemPanel,baseSender));

            commonOption.setPort(30470);
            commonOption.setServiceId("api");
            commonOption.setRedisPort(6379);
            commonOption.setRequestTimeoutSec(0);


            ApiOption apiOption = new ApiOption();
            apiOption.setApiPath(ApiApplication.class.getPackage().getName());
            apiOption.setApplicationContext(SpringContext.getContext());
            apiOption.setApiCallBackHandler(new DisconnectApi());
            apiOption.setExecutorService(Executors.newFixedThreadPool(200));


            var apiServer = new ApiServer(commonOption,apiOption);
            apiServer.start();

            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                log.info("*** shutting down Api server since JVM is shutting down");
                apiServer.stop();
                log.info("*** server shut down");
                try {
                    sleep(1000);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }));

            log.info("Api Server Started");
            //apiServer.awaitTermination();
        }catch (Exception e){
            log.error(ExceptionUtils.getMessage(e));
            System.exit(1);
        }

    }

    public static void main(String[] args) {
        SpringApplication.run(ApiApplication.class);
    }
}
